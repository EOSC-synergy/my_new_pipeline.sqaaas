# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.service_docker_compose import ServiceDockerCompose
from openapi_server import util


class JePLComposer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version: str=None, services: List[ServiceDockerCompose]=None):
        """JePLComposer - a model defined in OpenAPI

        :param version: The version of this JePLComposer.
        :param services: The services of this JePLComposer.
        """
        self.openapi_types = {
            'version': str,
            'services': List[ServiceDockerCompose]
        }

        self.attribute_map = {
            'version': 'version',
            'services': 'services'
        }

        self._version = version
        self._services = services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JePLComposer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JePL_composer of this JePLComposer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self):
        """Gets the version of this JePLComposer.


        :return: The version of this JePLComposer.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this JePLComposer.


        :param version: The version of this JePLComposer.
        :type version: str
        """

        self._version = version

    @property
    def services(self):
        """Gets the services of this JePLComposer.


        :return: The services of this JePLComposer.
        :rtype: List[ServiceDockerCompose]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this JePLComposer.


        :param services: The services of this JePLComposer.
        :type services: List[ServiceDockerCompose]
        """

        self._services = services
