# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Pipeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, sqa_criteria: List[str]=None):
        """Pipeline - a model defined in OpenAPI

        :param id: The id of this Pipeline.
        :param sqa_criteria: The sqa_criteria of this Pipeline.
        """
        self.openapi_types = {
            'id': int,
            'sqa_criteria': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'sqa_criteria': 'sqa_criteria'
        }

        self._id = id
        self._sqa_criteria = sqa_criteria

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pipeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pipeline of this Pipeline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Pipeline.


        :return: The id of this Pipeline.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pipeline.


        :param id: The id of this Pipeline.
        :type id: int
        """

        self._id = id

    @property
    def sqa_criteria(self):
        """Gets the sqa_criteria of this Pipeline.


        :return: The sqa_criteria of this Pipeline.
        :rtype: List[str]
        """
        return self._sqa_criteria

    @sqa_criteria.setter
    def sqa_criteria(self, sqa_criteria):
        """Sets the sqa_criteria of this Pipeline.


        :param sqa_criteria: The sqa_criteria of this Pipeline.
        :type sqa_criteria: List[str]
        """
        allowed_values = ["qc_style", "qc_unit", "qc_functional", "qc_security", "qc_doc"]  # noqa: E501
        if not set(sqa_criteria).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sqa_criteria` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(sqa_criteria) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._sqa_criteria = sqa_criteria
